datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Category {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String      @unique
  description    String?     @map("desc")
  commonImageUrl String?     @map("common_image_url")
  jewellery      Jewellery[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Jewellery {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  material     String
  image_url    String?
  supply_price Float
  category     Category          @relation(fields: [categoryId], references: [id])
  categoryId   String            @db.ObjectId
  supplier     Supplier          @relation(fields: [supplierId], references: [id])
  supplierId   String            @db.ObjectId
  sellable     Sellable?
  rentals      CustomerRentals[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Supplier {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  company_name String
  address      String
  email        String?
  telephone    String
  category     String
  jewellery    Jewellery[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([email])
}

model Sellable {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  jewellery   Jewellery @relation(fields: [jewelleryId], references: [id])
  jewelleryId String    @unique @db.ObjectId
  sell_price  Float
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String    @db.ObjectId
  orders      Orders?
}

model CustomerRentals {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  rental_date  DateTime
  return_date  DateTime
  rental_price Float
  customer     Customer  @relation(fields: [customerId], references: [id])
  customerId   String    @db.ObjectId
  jewellery    Jewellery @relation(fields: [jewelleryId], references: [id])
  jewelleryId  String    @db.ObjectId
}

model Customer {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  nic       String            @unique
  firstName String            @map("first_name")
  lastName  String            @map("last_name")
  address   String
  telephone String
  email     String?
  password  String
  rentals   CustomerRentals[]
  sellables Sellable[]
  services  Service[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([email, nic])
}

model Employee {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  nic        String
  fname      String
  lname      String
  email      String
  position   String
  leaves     Leave[]
  admin      Admin?
  DeliverBoy DeliverBoy?
}

model Admin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String   @unique @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id])
  username   String
  password   String
  email      String
  role       String
  records    Record[]
}

model Record {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  activity    String
  login_time  DateTime
  logout_time DateTime?
  admin       Admin     @relation(fields: [adminId], references: [id])
  adminId     String    @db.ObjectId
  leave       Leave?    @relation(fields: [leaveId], references: [id])
  leaveId     String?   @unique @db.ObjectId
}

model Leave {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  leave_from DateTime
  leave_to   DateTime
  reason     String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
  record     Record?
}

model DeliverBoy {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String     @unique @db.ObjectId
  employee   Employee   @relation(fields: [employeeId], references: [id])
  username   String
  password   String
  telephone  String
  deliveries Delivery[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([username])
}

model Delivery {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  deliveryAddress  String         @map("delivery_address")
  deliveryCity     String         @map("delivery_city")
  deliveryProvince String         @map("delivery_province")
  district         String
  phoneNumber      String         @map("phone_number")
  requestedTime    DateTime       @map("requested_time")
  deliveredTime    DateTime?      @map("delivered_time")
  status           DeliveryStatus @default(PENDING)
  distance         Float
  delivery_boy     DeliverBoy     @relation(fields: [deliveryBoyId], references: [id])
  deliveryBoyId    String         @db.ObjectId
  order            Orders?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Orders {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  recipe     String?
  delivery   Delivery?     @relation(fields: [deliveryId], references: [id])
  deliveryId String?       @unique @db.ObjectId
  payment    Payment?      @relation(fields: [paymentId], references: [id])
  paymentId  String?       @db.ObjectId
  sellable   Sellable      @relation(fields: [sellableId], references: [id])
  sellableId String        @unique @db.ObjectId
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  payment_date   DateTime
  payment_status String
  orders         Orders[]
}

model Design {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image_url   String?
  price       Float
  makes       Make[]
}

model Make {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  status        String
  weight        Float
  damage_type   String
  current_price Float
  design        Design @relation(fields: [designId], references: [id])
  designId      String @db.ObjectId
}

model Repair {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  service_id    String
  repair_type   String
  item_name     String
  damage_type   String
  description   String?
  current_price Float
  service       Service @relation(fields: [serviceId], references: [id])
  serviceId     String  @db.ObjectId
}

model Service {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  image_url     String
  jewellerytype String
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String   @db.ObjectId
  repairs       Repair[]
}
